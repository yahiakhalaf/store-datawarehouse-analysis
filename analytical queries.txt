with cte as (
select t.product_id, p.product_name, p.category, p.subcategory, t.net_amount
from transaction_fact t
join product_dimension p
on t.product_id = p.product_id), cte2 as (
select distinct product_name, subcategory, rank() over(partition by subcategory order by net_amount desc) as rank
from cte)
select product_name, subcategory
from cte2 where rank=1;

with cte as(
select t.product_id, p.product_name, p.category, p.subcategory, to_char(d.date,'MM-YYYY') as month_year, t.quantity
from transaction_fact t
join product_dimension p
on t.product_id = p.product_id
join time_dimension d
on t.time_id = d.time_id), cte2 as (
select product_name, category, subcategory, month_year, sum(quantity) over(partition by product_name) as total_quantity
from cte), cte3 as (
select distinct product_name, category, subcategory, month_year, dense_rank() over(partition by month_year order by total_quantity) as rank
from cte2)
select * from cte3 where rank <=3
order by month_year, rank;

with cte as(
select t.product_id, p.product_name, p.category, p.subcategory, c.gender, t.quantity
from transaction_fact t
join product_dimension p
on t.product_id = p.product_id
join customer_dimension c
on c.customer_id = t.customer_id), cte2 as (
select product_name, category, subcategory, gender, sum(quantity) over(partition by product_name) as total_quantity
from cte), cte3 as (
select distinct product_name, category, subcategory, gender, dense_rank() over(partition by gender order by total_quantity) as rank
from cte2)
select * from cte3 where rank <=3
order by gender, rank;

with cte as(
select t.product_id, p.product_name, p.category, p.subcategory, 
case
	when age < 30 then '30'
	when age < 50 then '<50'
	else '>=50'
end as age_group
, t.quantity
from transaction_fact t
join product_dimension p
on t.product_id = p.product_id
join customer_dimension c
on c.customer_id = t.customer_id), cte2 as (
select product_name, category, subcategory, age_group, sum(quantity) over(partition by product_name) as total_quantity
from cte), cte3 as (
select distinct product_name, category, subcategory, age_group, dense_rank() over(partition by age_group order by total_quantity) as rank
from cte2)
select * from cte3 where rank <=3
order by age_group, rank;


Which types of promotions result in the highest sales?
with cte as (
select t.product_id, t.net_amount, p.promotion_name
from transaction_fact t
join promotion_dimension p
on p.promotion_id = t.promotion_id)
select distinct promotion_name, sum(net_amount) over(partition by promotion_name) as sales
from cte order by sales desc;

WITH ProductPairs AS (
    SELECT 
        CASE 
            WHEN t1.Product_ID < t2.Product_ID THEN t1.Product_ID 
            ELSE t2.Product_ID 
        END AS Product1,
        CASE 
            WHEN t1.Product_ID < t2.Product_ID THEN t2.Product_ID 
            ELSE t1.Product_ID 
        END AS Product2,
        p1.Category AS Category,
        COUNT(*) AS PurchaseCount
    FROM 
        transaction_fact t1
    JOIN 
        transaction_fact t2 ON t1.Transaction_ID = t2.Transaction_ID
    JOIN 
        product_dimension p1 ON t1.Product_ID = p1.Product_ID
    JOIN 
        product_dimension p2 ON t2.Product_ID = p2.Product_ID
    WHERE 
        t1.Product_ID <> t2.Product_ID 
        AND p1.Category = p2.Category 
    GROUP BY 
        CASE 
            WHEN t1.Product_ID < t2.Product_ID THEN t1.Product_ID 
            ELSE t2.Product_ID 
        END,
        CASE 
            WHEN t1.Product_ID < t2.Product_ID THEN t2.Product_ID 
            ELSE t1.Product_ID 
        END,
        p1.Category
),
RankedPairs AS (
    SELECT 
        pp.Category,
        p1.Product_Name AS Product1_Name,
        p2.Product_Name AS Product2_Name,
        ROW_NUMBER() OVER (PARTITION BY pp.Category ORDER BY pp.PurchaseCount DESC) AS PairRank
    FROM 
        ProductPairs pp
    JOIN 
        product_dimension p1 ON pp.Product1 = p1.Product_ID
    JOIN 
        product_dimension p2 ON pp.Product2 = p2.Product_ID
)
SELECT 
    Product1_Name,
    Product2_Name,
	Category,
    PairRank
FROM 
    RankedPairs
WHERE 
    PairRank <= 10 
ORDER BY 
    Category, PairRank;

with cte as(
select t.product_id, p.product_name, p.category, p.subcategory, s.store_name, s.store_id, t.quantity
from transaction_fact t
join product_dimension p
on t.product_id = p.product_id
join store_dimension s
on s.store_id = t.store_id), cte2 as (
select product_name, category, subcategory, store_name, store_id, sum(quantity) over(partition by product_name) as total_quantity
from cte), cte3 as (
select distinct product_name, category, subcategory, store_name, store_id, dense_rank() over(partition by store_name order by total_quantity) as rank
from cte2)
select  product_name, category, subcategory, store_name, rank from cte3 where rank <=3
order by store_id,rank;